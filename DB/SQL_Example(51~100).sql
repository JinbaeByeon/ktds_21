--51. 직무가 가장 많이 변경된 부서의 이름을 조회한다.

-- 모두 조회
SELECT DEPARTMENT_NAME
	 , COUNT(1)
  FROM DEPARTMENTS DEP
  JOIN JOB_HISTORY JH
 	ON JH.DEPARTMENT_ID = DEP.DEPARTMENT_ID 
 GROUP BY DEPARTMENT_NAME
HAVING COUNT(1) = (SELECT MAX(COUNT(1))
					 FROM JOB_HISTORY
					GROUP BY DEPARTMENT_ID)
;

-- 하나만 조회
SELECT DEP.DEPARTMENT_NAME
	 , DEP_MAXJH.CNT
  FROM DEPARTMENTS DEP
  JOIN (SELECT *
		  FROM (SELECT DEPARTMENT_ID
					 , COUNT(1) CNT
				  FROM JOB_HISTORY JH
				 GROUP BY JH.DEPARTMENT_ID)
		 ORDER BY CNT DESC) DEP_MAXJH
  	ON ROWNUM = 1
 WHERE DEP_MAXJH.DEPARTMENT_ID = DEP.DEPARTMENT_ID

--52. 'Seattle' 에서 근무중인 사원의 이름, 성, 연봉, 부서명 을 조회한다.
SELECT EMP.FIRST_NAME 
	 , EMP.LAST_NAME 
	 , EMP.SALARY 
	 , DEP.DEPARTMENT_NAME 
  FROM EMPLOYEES EMP
  JOIN DEPARTMENTS DEP
  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
 WHERE DEP.LOCATION_ID = (SELECT LOCATION_ID
 							FROM LOCATIONS 
 						   WHERE CITY = 'Seattle')
;

--53. 'Seattle' 에서 근무하지 않는 모든 사원의 이름, 성, 연봉, 부서명, 도시를 조회한다.
SELECT *
  FROM EMPLOYEES EMP
  JOIN DEPARTMENTS DEP
    ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID 
  JOIN LOCATIONS LOC
    ON LOC.LOCATION_ID = DEP.LOCATION_ID
 WHERE LOC.CITY != 'Seattle'
;

--54. 근무중인 사원이 가장 많은 도시와 사원의 수를 조회한다.
SELECT *
  FROM (SELECT LOC.CITY 
			 , COUNT(1) CNT
		  FROM EMPLOYEES EMP
		  JOIN DEPARTMENTS DEP
		  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID 
		  JOIN LOCATIONS LOC
		  	ON LOC.LOCATION_ID = DEP.LOCATION_ID
		 GROUP BY LOC.CITY
		 ORDER BY CNT DESC)
 WHERE ROWNUM = 1
;

SELECT *
  FROM (SELECT LOC.CITY
			 , COUNT(1) CNT
		  FROM EMPLOYEES EMP
		  JOIN LOCATIONS LOC
		  	ON LOC.LOCATION_ID IN (SELECT LOCATION_ID
		  							 FROM DEPARTMENTS DEP
		  							WHERE DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID)
		 GROUP BY LOC.CITY
		 ORDER BY CNT DESC)
 WHERE ROWNUM = 1
;
 
--55. 근무중인 사원이 없는 도시를 조회한다.
SELECT CITY
  FROM LOCATIONS 
 WHERE LOCATION_ID NOT IN (SELECT LOCATION_ID
 							 FROM DEPARTMENTS
 							WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
 							  						  FROM EMPLOYEES))
;

-- 56. 연봉이 7000 에서 12000 사이인 사원이 근무중인 도시를 조회한다.
SELECT CITY
  FROM LOCATIONS LOC
 WHERE LOCATION_ID IN (SELECT LOCATION_ID	
 						 FROM DEPARTMENTS
 						WHERE DEPARTMENT_ID IN (SELECT DISTINCT DEPARTMENT_ID
 												  FROM EMPLOYEES
 												 WHERE SALARY BETWEEN 7000 AND 12000))
;

-- 57. 'Seattle' 에서 근무중인 사원의 직무명을 중복없이 조회한다.
SELECT DISTINCT JOB_ID
  FROM EMPLOYEES 
 WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
 						   FROM DEPARTMENTS
 						  WHERE LOCATION_ID IN (SELECT LOCATION_ID
 						  						  FROM LOCATIONS
 						  						 WHERE CITY = 'Seattle'))
;

-- 58. 사내의 최고연봉과 최저연봉의 차이를 조회한다.
SELECT MAX(SALARY) - MIN(SALARY)
  FROM EMPLOYEES
;

-- 59. 이름이 'Renske' 인 사원의 연봉과 같은 연봉을 받는 사원의 모든 정보를 조회한다. 단, 'Renske' 사원은 조회에서 제외한다.
SELECT *
  FROM EMPLOYEES 
 WHERE SALARY = (SELECT SALARY
 				   FROM EMPLOYEES
 				  WHERE FIRST_NAME = 'Renske')
   AND FIRST_NAME != 'Renske'
;

-- 60. 회사 전체의 평균 연봉보다 많이 받는 사원들 중 이름에 'u' 가 포함된 사원과 동일한 부서에서 근무중인 사원들의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES 
 WHERE DEPARTMENT_ID IN (SELECT DISTINCT DEPARTMENT_ID
 						   FROM EMPLOYEES
 						  WHERE SALARY > (SELECT AVG(SALARY)
 						  					FROM EMPLOYEES)
 						  	AND FIRST_NAME LIKE '%u%')
;

-- 61. 부서가 없는 국가명을 조회한다.

-- IN
SELECT *
  FROM COUNTRIES
 WHERE COUNTRY_ID NOT IN (SELECT DISTINCT COUNTRY_ID
 						FROM LOCATIONS
 					   WHERE LOCATION_ID IN (SELECT LOCATION_ID
 					   						   FROM DEPARTMENTS)
 					   	 AND COUNTRY_ID IS NOT NULL)
;

-- JOIN : OUTER JOIN 안에서 INNER JOIN으로 묶고 난 후 NULL 체크를 해야 함(한번에 조인해서 풀순 없음) 
SELECT *
  FROM COUNTRIES CON
  LEFT JOIN (SELECT LOC.COUNTRY_ID
  			   FROM LOCATIONS LOC
  			   JOIN DEPARTMENTS DEP
  			   	 ON DEP.LOCATION_ID = LOC.LOCATION_ID) LOC
  	ON LOC.COUNTRY_ID = CON.COUNTRY_ID
 WHERE LOC.COUNTRY_ID IS NULL
;

-- 62. 'Europe' 에서 근무중인 사원들의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES EMP
 WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
 						   FROM DEPARTMENTS
 						  WHERE LOCATION_ID IN (SELECT LOCATION_ID
 						  						  FROM LOCATIONS
 						  						 WHERE COUNTRY_ID IN (SELECT COUNTRY_ID
 						  						 						FROM COUNTRIES
 						  						 					   WHERE REGION_ID = (SELECT REGION_ID
 						  						 					   						 FROM REGIONS
 						  						 					   						WHERE REGION_NAME = 'Europe'))))
;

-- 63. 'Europe' 에서 가장 많은 사원들이 있는 부서명을 조회한다.
SELECT *
  FROM (SELECT DEP.DEPARTMENT_NAME 
			 , COUNT(1) CNT
		  FROM DEPARTMENTS DEP
		  JOIN EMPLOYEES EMP
		  	ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
		 WHERE DEP.LOCATION_ID IN (SELECT LOCATION_ID
		 							 FROM LOCATIONS
		 							WHERE COUNTRY_ID IN (SELECT COUNTRY_ID
		 												   FROM COUNTRIES
		 												  WHERE REGION_ID IN (SELECT REGION_ID
		 												  						FROM REGIONS
		 												  					   WHERE REGION_NAME = 'Europe')))									  					   
		 GROUP BY DEP.DEPARTMENT_NAME
		 ORDER BY CNT DESC)
 WHERE ROWNUM = 1
;

-- 64. 대륙 별 사원의 수를 조회한다.
SELECT REG.REGION_NAME 
	 , COUNT(1)
  FROM REGIONS REG
  JOIN EMPLOYEES EMP
	ON EMP.DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
							   FROM DEPARTMENTS
							  WHERE LOCATION_ID IN (SELECT LOCATION_ID
							  						  FROM LOCATIONS LOC
							  						 WHERE COUNTRY_ID IN (SELECT CON.COUNTRY_ID
							  						 					 	FROM COUNTRIES CON
							  						 					   WHERE CON.REGION_ID = REG.REGION_ID)))
 GROUP BY REG.REGION_NAME 
;

-- 65. 연봉이 2500, 3500, 7000 이 아니며 직업이 SA_REP 이나 ST_CLERK 인 사람들을 조회한다.
SELECT *
  FROM EMPLOYEES 
 WHERE SALARY NOT IN (2500, 3500, 7000)
   AND JOB_ID IN ('SA_REP', 'ST_CLERK')
;

-- 66. 사원의 사원번호, 이름, 성, 상사의 사원번호, 상사의 이름, 상사의 성을 조회한다.
SELECT EMP.EMPLOYEE_ID 
	 , EMP.FIRST_NAME 
	 , EMP.LAST_NAME
	 , MGR.EMPLOYEE_ID 
	 , MGR.FIRST_NAME 
	 , MGR.LAST_NAME
  FROM EMPLOYEES EMP
  JOIN EMPLOYEES MGR 
  	ON MGR.EMPLOYEE_ID = EMP.MANAGER_ID
;

-- 67. 101번 사원의 모든 부하직원 들의 이름, 성, 상사사원번호, 상사사원명을 조회한다.
 SELECT EMP.FIRST_NAME 
 	  , EMP.LAST_NAME 
 	  , EMP.MANAGER_ID
 	  , MGR.FIRST_NAME 
   FROM EMPLOYEES EMP
   JOIN EMPLOYEES MGR
   	 ON MGR.EMPLOYEE_ID = EMP.MANAGER_ID
  WHERE EMP.EMPLOYEE_ID != 101
  START WITH EMP.EMPLOYEE_ID = 101
CONNECT BY PRIOR EMP.EMPLOYEE_ID = EMP.MANAGER_ID
;

-- 68. 114번 직원의 모든 상사들의 이름, 성, 상사사원번호, 상사사원명을 조회한다.
 SELECT EMP.FIRST_NAME
 	  , EMP.LAST_NAME
 	  , EMP.MANAGER_ID
 	  , MGR.FIRST_NAME
   FROM EMPLOYEES EMP
   JOIN EMPLOYEES MGR
   	 ON MGR.EMPLOYEE_ID = EMP.MANAGER_ID 
  WHERE EMP.EMPLOYEE_ID != 114
  START WITH EMP.EMPLOYEE_ID = 114
CONNECT BY PRIOR EMP.MANAGER_ID = EMP.EMPLOYEE_ID
;

-- 69. 114번 직원의 모든 상사들의 이름, 성, 상사사원번호, 상사사원명을 조회한다. 단, 역순으로 조회한다.
 SELECT EMP.FIRST_NAME 
 	  , EMP.LAST_NAME 
 	  , EMP.MANAGER_ID
 	  , MGR.FIRST_NAME
   FROM EMPLOYEES EMP
   JOIN EMPLOYEES MGR 
   	 ON MGR.EMPLOYEE_ID = EMP.MANAGER_ID
  WHERE EMP.EMPLOYEE_ID != 113
  START WITH EMP.EMPLOYEE_ID = 113
CONNECT BY PRIOR EMP.MANAGER_ID = EMP.EMPLOYEE_ID
  ORDER BY LEVEL DESC
; 

-- 70. 모든 사원들을 연봉 오름차순 정렬하여 조회한다.
SELECT *
  FROM EMPLOYEES 
 ORDER BY SALARY 
;

-- 71. 모든 사원들을 이름 내림차순 정렬하여 조회한다.
SELECT *
  FROM EMPLOYEES
 ORDER BY FIRST_NAME DESC
;

-- 72. 모든 사원들의 이름, 성, 연봉, 부서명을 부서번호로 내림차순 정렬하여 조회한다.
SELECT EMP.FIRST_NAME
	 , EMP.LAST_NAME 
	 , EMP.SALARY
	 , DEP.DEPARTMENT_NAME 
	 , DEP.DEPARTMENT_ID 
  FROM EMPLOYEES EMP
  LEFT JOIN (SELECT DEPARTMENT_ID
  			 	  , DEPARTMENT_NAME
  		  	   FROM DEPARTMENTS DEP) DEP
  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
 ORDER BY EMP.DEPARTMENT_ID DESC
;

-- 73. 부서명별 연봉의 합을 내림차순 정렬하여 조회한다.
SELECT DEPARTMENT_NAME
	 , SUM(SALARY) SUM_SALARY
  FROM (SELECT DEP.DEPARTMENT_NAME
  			 , EMP.SALARY
  		  FROM EMPLOYEES EMP
  		  JOIN DEPARTMENTS DEP
  		  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID)
 WHERE DEPARTMENT_NAME IS NOT NULL
 GROUP BY DEPARTMENT_NAME
 ORDER BY SUM_SALARY DESC
;

-- 74. 직무명별 사원의 수를 오름차순 정렬하여 조회한다.
SELECT JOB_TITLE
	 , CNT
  FROM (SELECT JOB.JOB_TITLE
			 , COUNT(1) CNT
  		  FROM EMPLOYEES EMP
  		  JOIN JOBS JOB
  		  	ON JOB.JOB_ID = EMP.JOB_ID  		  	
		 GROUP BY JOB.JOB_TITLE)
 ORDER BY CNT
;

-- 75. 모든 사원들의 모든 정보를 조회한다. 단, 인센티브를 받는 사원은 "인센티브여부" 컬럼에 "Y"를, 아닌 경우 "N"으로 조회한다.
SELECT EMP.*
	 , CASE 
		   WHEN COMMISSION_PCT IS NULL THEN
		   	  	'N'
		   ELSE
		   		'Y'	 	
	    END "인센티브여부"
  FROM EMPLOYEES EMP
; 

-- 76. 모든 사원들의 이름을 10자리로 맞추어 조회한다.
SELECT LPAD(FIRST_NAME,10,'-')
  FROM EMPLOYEES
;
   
-- 77. 2007년에 직무가 변경된 사원들의 현재 직무명, 부서명,  사원번호, 이름, 성을 조회한다.
SELECT JOB.JOB_TITLE 
	 , DEP.DEPARTMENT_NAME
	 , EMPLOYEE_ID 
	 , FIRST_NAME 
	 , LAST_NAME 
  FROM EMPLOYEES EMP
  JOIN DEPARTMENTS DEP
  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
  JOIN JOBS JOB
  	ON JOB.JOB_ID = EMP.JOB_ID
 WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID
 						 FROM JOB_HISTORY
 						WHERE END_DATE BETWEEN TO_DATE('2007-01-01','YYYY-MM-DD') AND TO_DATE('2007-12-31','YYYY-MM-DD'))
;

SELECT JOB.JOB_TITLE 
	 , DEP.DEPARTMENT_NAME
	 , EMPLOYEE_ID 
	 , FIRST_NAME 
	 , LAST_NAME 
  FROM EMPLOYEES EMP
  JOIN DEPARTMENTS DEP
  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
  JOIN JOBS JOB
  	ON JOB.JOB_ID = EMP.JOB_ID
 WHERE EMP.EMPLOYEE_ID IN (SELECT EMPLOYEE_ID 
						    FROM (SELECT EMPLOYEE_ID 
									   , TO_NUMBER(TO_CHAR(END_DATE,'YYYY')) END_YEAR
								    FROM JOB_HISTORY) JH
						   WHERE JH.END_YEAR = 2007)
;

-- 78. 직무별 최대 연봉보다 더 많은 연봉을 받는 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES E
 WHERE SALARY >= (SELECT MAX_SALARY - 100
 				   FROM JOBS J
 				  WHERE J.JOB_ID = E.JOB_ID)
;

-- 79. 사원들의 입사일자 중 이름, 성, 연도만 조회한다.
SELECT FIRST_NAME 
	 , LAST_NAME 
	 , TO_CHAR(HIRE_DATE,'YYYY') "연도"
  FROM EMPLOYEES 
;

-- 80. 사원들의 입사일자 중 이름, 성, 연도, 월 만 조회한다.
SELECT FIRST_NAME
	 , LAST_NAME
	 , TO_CHAR(HIRE_DATE,'YYYY') 연도
	 , TO_CHAR(HIRE_DATE,'MM') 월
  FROM EMPLOYEES  
;

-- 81. 100번 사원의 모든 부하직원을 계층조회한다. 단, LEVEL이 4인 사원은 제외한다.
 SELECT LEVEL
 	  , EMP.*
   FROM EMPLOYEES EMP
  WHERE LEVEL != 4
  START WITH EMPLOYEE_ID = 100
CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID
;

-- 82. 많은 연봉을 받는 10명을 조회한다.
SELECT *
  FROM (SELECT *
		  FROM EMPLOYEES 
		 ORDER BY SALARY DESC)
 WHERE ROWNUM <= 10
;

-- 83. 가장 적은 연봉을 받는 사원의 상사명, 부서명을 조회한다.
SELECT MGR.FIRST_NAME "사원의 상사명"
	 , DEP.DEPARTMENT_NAME "사원의 부서명"
  FROM (SELECT *
		  FROM EMPLOYEES
		 WHERE SALARY = (SELECT MIN(SALARY)
		 				   FROM EMPLOYEES)) EMP_MINSALARY
  JOIN EMPLOYEES MGR
  	ON MGR.EMPLOYEE_ID = EMP_MINSALARY.MANAGER_ID
  JOIN DEPARTMENTS DEP
  	ON DEP.DEPARTMENT_ID = EMP_MINSALARY.DEPARTMENT_ID
; 

-- 84. 많은 연봉을 받는 사원 중 11번 째 부터 20번째를 조회한다.
SELECT *
  FROM (SELECT E.*
			 , ROWNUM RNUM
		  FROM (SELECT *
				  FROM EMPLOYEES
				 ORDER BY SALARY DESC) E
		 WHERE ROWNUM <= 20)
 WHERE RNUM >= 11
;

-- 85. 가장 적은 연봉을 받는 중 90번 째 부터 100번째를 조회한다.
SELECT *
  FROM (SELECT E.*
			 , ROWNUM RNUM
		  FROM (SELECT *
				  FROM EMPLOYEES 
				 ORDER BY SALARY) E)
 WHERE RNUM BETWEEN 90 AND 100
;

-- 86. 'PU_CLERK' 직무인 2번째 부터 5번째 사원의 부서명, 직무명을 조회한다.
SELECT EMP.EMPLOYEE_ID
	 , DEP.DEPARTMENT_NAME
	 , JOB.JOB_TITLE 
  FROM (SELECT *
		  FROM (SELECT E.EMPLOYEE_ID 
		  			 , E.JOB_ID
		  			 , E.DEPARTMENT_ID
					 , ROWNUM RNUM
				  FROM EMPLOYEES E
				 WHERE JOB_ID = 'PU_CLERK')
		 WHERE RNUM BETWEEN 2 AND 5) EMP
  JOIN DEPARTMENTS DEP
  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
  JOIN JOBS JOB
	ON JOB.JOB_ID = EMP.JOB_ID
;

-- 87. 모든 사원의 정보를 직무 오름차순, 연봉 내림차순으로 조회한다.
SELECT *
  FROM EMPLOYEES 
 ORDER BY JOB_ID
 	 , SALARY DESC
;

-- 88. 직무별 평균연봉을 평균연봉순으로 오름차순 정렬하여 조회한다.
SELECT JOB_ID 
	 , AVG(SALARY) AVG_SAL
  FROM EMPLOYEES 
 GROUP BY JOB_ID
 ORDER BY AVG_SAL
;

-- 89. 부서별 평균연봉을 최대연봉순으로 내림차순 정렬하여 조회한다.
SELECT DEPARTMENT_ID
	 , AVG_SAL
  FROM (SELECT DEPARTMENT_ID
			 , AVG(SALARY) AVG_SAL
			 , MAX(SALARY) MAX_SAL
		  FROM EMPLOYEES
		 WHERE DEPARTMENT_ID IS NOT NULL
		 GROUP BY DEPARTMENT_ID)
 ORDER BY MAX_SAL DESC
;

-- 90. 이름의 첫 번째 글자별 평균연봉을 조회한다.
SELECT SUBSTR(FIRST_NAME,1,1) FIRST_WORD
	 , AVG(SALARY)
  FROM EMPLOYEES 
 GROUP BY SUBSTR(FIRST_NAME,1,1)
;

SELECT FIRST_WORD
	 , AVG(SALARY)
  FROM (SELECT SUBSTR(FIRST_NAME,1,1) FIRST_WORD
			 , SALARY
		  FROM EMPLOYEES)
 GROUP BY FIRST_WORD
;

-- 91. 연도별 최소연봉을 조회한다.
SELECT HIRE_YEAR
	 , MIN(SALARY)
  FROM (SELECT TO_CHAR(HIRE_DATE,'YYYY') HIRE_YEAR
  			 , SALARY
		  FROM EMPLOYEES) 
 GROUP BY HIRE_YEAR
;

-- 92. 월별 최대연봉 중 2번째 4번째 데이터만 조회한다.
SELECT *
  FROM (SELECT MAXSAL_BY_MONTH.*
			 , ROWNUM RNUM
		  FROM (SELECT HIRE_MONTH
					 , MAX(SALARY)
				  FROM (SELECT TO_CHAR(HIRE_DATE,'MM') HIRE_MONTH
				  			 , SALARY
						  FROM EMPLOYEES)
				 GROUP BY HIRE_MONTH) MAXSAL_BY_MONTH
		 WHERE ROWNUM <= 4)
 WHERE RNUM >=2
;

-- 93. 직무명별 최소연봉을 조회한다.
SELECT JOB.JOB_TITLE 
	 , MIN(EMP.SALARY)
  FROM EMPLOYEES EMP
  JOIN JOBS JOB
  	ON JOB.JOB_ID = EMP.JOB_ID
 GROUP BY JOB.JOB_TITLE
;

-- 94. 부서명별 최대연봉을 조회한다.
SELECT DEP.DEPARTMENT_NAME 
	 , MAX(EMP.SALARY)
  FROM EMPLOYEES EMP
  JOIN DEPARTMENTS DEP
  	ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
 GROUP BY DEP.DEPARTMENT_NAME
;

-- 95. 직무명, 부서명 별 사원 수, 평균연봉을 조회한다.
SELECT JOB_ID
	 , DEPARTMENT_ID 
	 , COUNT(1)
	 , AVG(SALARY)
  FROM EMPLOYEES
 GROUP BY JOB_ID
 	 , DEPARTMENT_ID
;

-- 96. 도시별 사원 수를 조회한다.
SELECT LOC.CITY
	 , COUNT(1)
  FROM LOCATIONS LOC
  JOIN EMPLOYEES EMP
  	ON EMP.DEPARTMENT_ID IN (SELECT DEP.DEPARTMENT_ID
  							   FROM DEPARTMENTS DEP
  							  WHERE DEP.LOCATION_ID = LOC.LOCATION_ID)
 GROUP BY LOC.CITY
;

-- 97. 국가별 사원 수, 최대연봉, 최소연봉을 조회한다.
SELECT CON.COUNTRY_NAME
	 , COUNT(EMP.EMPLOYEE_ID)
	 , MAX(EMP.SALARY)
	 , MIN(EMP.SALARY)
  FROM COUNTRIES CON
  LEFT JOIN EMPLOYEES EMP
  	ON EMP.DEPARTMENT_ID IN (SELECT DEP.DEPARTMENT_ID 
  							   FROM DEPARTMENTS DEP
  							  WHERE DEP.LOCATION_ID IN (SELECT LOC.LOCATION_ID
  							  						  FROM LOCATIONS LOC
  							  						 WHERE LOC.COUNTRY_ID = CON.COUNTRY_ID))
 GROUP BY CON.COUNTRY_NAME
;  							   

-- 98. 대륙별 사원 수를 대륙명으로 오름차순 정렬하여 조회한다.
SELECT REG.REGION_NAME
	 , COUNT(1)
  FROM REGIONS REG
  JOIN EMPLOYEES EMP
  	ON EMP.DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
  							   FROM DEPARTMENTS
  							  WHERE LOCATION_ID IN (SELECT LOCATION_ID
  							  						  FROM LOCATIONS
  							  						 WHERE COUNTRY_ID IN (SELECT CON.COUNTRY_ID
  							  						 						FROM COUNTRIES CON
  							  						 					   WHERE CON.REGION_ID = REG.REGION_ID)))
 GROUP BY REG.REGION_NAME
 ORDER BY REG.REGION_NAME 
;

-- 99. 이름이나 성에 'A' 혹은 'a' 가 포함된 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE LOWER(FIRST_NAME) LIKE '%a%'
 	OR LOWER(LAST_NAME) LIKE '%a%'
;

-- 100. 국가별로 연봉이 5000 이상인 사원의 수를 조회한다.
SELECT CON.COUNTRY_NAME
	 , COUNT(1)
  FROM COUNTRIES CON
  JOIN EMPLOYEES EMP
  	ON EMP.DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
  							   FROM DEPARTMENTS
  							  WHERE LOCATION_ID IN (SELECT LOC.LOCATION_ID
  							  						  FROM LOCATIONS LOC
  							  						 WHERE LOC.COUNTRY_ID = CON.COUNTRY_ID))
 WHERE EMP.SALARY >= 5000
 GROUP BY CON.COUNTRY_NAME
;
